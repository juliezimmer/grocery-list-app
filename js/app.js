//app is defined as a separate module called "GroceryListApp" 
var app = angular.module('groceryListApp', ["ngRoute"]);

// routing configuration object
app.config(function($routeProvider){
  //$locationProvider.hashPrefix(''); 
  $routeProvider
      .when("/",{ /* this is the main page of the app where the main grocery list is seen */ 
          templateUrl: "partials/groceryList.html",
          controller: "GroceryListItemsController"
      })
      .when("/addItem",{ //this is the page where a grocery item can be added (addItem.html) -->
          templateUrl: "partials/addItem.html",
          controller: "GroceryListItemsController"
      })
      /* Route parameters are especially important when deleting or updating an    item that might have more than one ppiece of information to update.       The route param item will pass a parameter of "/:id" (or whatever is      put into the path after : ) to the controller,                            GroceryListItemsController.             
         The /:id might be used to identify a specific item on the grocery list to edit.   
         If route parameters are used, another dependency, $routeParams, has to be injected into the controller that uses the route params.  In this case, it's the GroceryListItemsController. */ 
      .when("/addItem/:id/", { 
        templateUrl: "partials/addItem.html",
        controller: "GroceryListItemsController"
      })
      .otherwise ({
          redirectTo: "/" // this is the main grocery list page
      })
});

/* Creating a SERVICE called GroceryService for the controllers to use. 
   The grocery items list will be passed into the GroceryListItemsController that needs access to the list via route params. */
app.service("GroceryService", function(){
      //create an empty object literal
      var groceryService = {};

      /* Using object dot.notation: object.object property = the items in the array of objects from the GroceryListItemsController. */
      groceryService.groceryItems =  [
        {
          id: 1,
          completed: true, 
          itemName: 'milk', 
          date: '2014-10-01' // date will be used to sort the list items
        },
        {
          id: 2,
          completed: true, 
          itemName: 'cookies', 
          date: '2014-10-01'
        },
        {
          id: 3,
          completed: true, 
          itemName: 'ice cream', 
          date: '2014-10-02'
        },
        {
          id: 4,
          completed: true, 
          itemName: 'potatoes', 
          date: '2014-10-02'
        },  
        {
          id: 5,
          completed: true, 
          itemName: 'cereal', 
          date: '2014-10-03'
        },
        {
          id: 6,
          completed: true, 
          itemName: 'bread', 
          date: '2014-10-03'
        },
        {
          id: 7,
          completed: true, 
          itemName: 'eggs', 
          date: '2014-10-04'
        },
        { 
          id: 8,
          completed: true, 
          itemName: 'tortillas', 
          date: '2014-10-04'
        }
    ];
    
    // Function to create a unique ID for each grocery item
    groceryService.getNewId = function() {
      // If there is a variable, newId, then increase the newId by 1  increase it by 1
        if(groceryService.newId) {
              groceryService.newId++;
              return groceryService.newId;
            } else { // it there is not a variable newId, create it
               /* The function to create a newId is taken from the underscore.js library. The function looks at all the ids in the groceryService.groceryItems array. It finds the max id (the largest number). It then creates a newId by adding 1 to the highest id in the array, which becomes the newId. */
                    var maxId = _.max(groceryService.groceryItems, function(entry) {
                        return entry.id;
                      })
                      groceryService.newId = maxId.id + 1;
                      return groceryService.newId;
            }
        };

      /* This is the save()function that is called in the GroceryListItemsController as  $scope.save = function()... (line 121). 
      It takes an entry, GroceryService.save($scope.groceryItem); from the save function and pushes it to the groceryService.groceryItems array. 
      When the save () function is called, it gets the entry's id by the newId generated by the .getNewId () function. */
      groceryService.save = function (entry) {
        /* this adds the newId that was created by the groceryService.getNewId function */
          entry.id = groceryService.getNewId();
          groceryService.groceryItems.push(entry);
      };

      // return the object that was created on line 32. 
        return groceryService;
  });


// first Controller named "HomeController"
// controls the body of the app in the  index.html file
// the variable appTitle is set to "Grocery List", the name of the app. 
// The GroceryService is passed into this controller for it to use.
app.controller("HomeController",["$scope","GroceryService", function ($scope, GroceryService) {
    
    $scope.appTitle = "Grocery List"; 

    /* This will pull the name of the first item our of the GroceryService.groceryItems array in the GroceryService above. */    //GroceryService.groceryItems[0].itemName;
}]);

// second controller - called "GroceryListItemsController"
// Handles all the interaction with the grocery list items
/* In order for the GroceryService to pass the grocery list items into the GroceryListItemsController, another parameter of "GroceryService" has to be added to the controller inside the [] AND within the function parameters. */ 
app.controller("GroceryListItemsController", ["$scope", "$routeParams", "$location", "GroceryService", function($scope, $routeParams, $location, GroceryService) { 
    
    $scope.groceryItems = GroceryService.groceryItems; /* Note that GroceryService.groceryItems is defined in the service as an arry of objects that are the grocery items. */ 

    /* This is what is linked to the ng-model in addItem.html where the new items will be added to the grocery list. */
    $scope.groceryItem = {id:9, completed: true, itemName:"cheese", date: new Date()};

    // The save function on addItem.html
    // The logic in the function will be linked to the GroceryService
    $scope.save = function() {
        /* This says to go to the GroceryService and use the save() function there with this particular parameter passed into the function, which is the $scope.groceryItem from line 112. */
        GroceryService.save($scope.groceryItem);

        /* Now, the $location service is used to direct the flow of code back to the grocery list. */
        $location.path("/");
    }
    console.log($scope.groceryItems);
}]);